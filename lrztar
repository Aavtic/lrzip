#!/bin/bash

# Copyright (C) George Makrydakis 2009, 2010
# Copyright (C) Con Kolivas 2010

# A bash wrapper for Con Kolivas' excellent lrzip utility. For the time
# being, lrzip does not like pipes, so we had to do this. It is kind of
# self - documenting, spawned out of a test tube bash shell script.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function lrztar_local() {
    local p="${@:1:$(($#-1))}" s="${!#}" tname= fname= \
        v_w=0 v_O=0 v_S=0 v_D=0 v_P=0 v_q=0 v_L=0 \
        v_n=0 v_l=0 v_b=0 v_g=0 v_z=0 v_M=0 v_T=0 \
        v_N=0 v_v=0 v_f=0 v_d=0 v_h=0 x= i=
    OPTERR=0
    trap '[[ -z $tname ]] || rm -rf "$tname" &> /dev/null' 1 2 3 15
    which tar   &> /dev/null || { printf "lrztar: no tar in your path\n"; return 1; }
    which lrzip &> /dev/null || { printf "lrztar: no lrzip in your path\n"; return 1; }
    while getopts w:O:S:DPqL:nlbgzMT:N:vfodtVh x; do
    [[ $x == [otV] ]] || ((v_$x=1)) &> /dev/null \
        || { printf "lrztar: invalid option for lrztar %s\n" "$x"; return 1; }
    done
    [[ $(basename "$0") == lrzuntar ]] \
        && { v_d=1; p="-d $p"; }
    { ! (($#)) || ((v_h)); } && {
        printf "lrztar wrapper for compressing/decompressing whole directories with lrzip.\n"
        printf "usage: lrztar [lrzip options] <directory>  will compress directory to directory.tar.lrz\n"
        printf "lrztar -d [lrzip options] <directory.tar.lrz>  will extract directory from directory.tar.lrz\n"
        printf "lrzuntar [lrzip options] <directory.tar.lrz> will extract directory from directory.tar.lrz\n"
        printf "lrzip -h will list lrzip options\n"
        return
    }
    ((v_d)) && {
        fname="$(basename "$s")"; tname="${fname%.lrz}";
        ! ((v_f)) && [[ -e ${tname%.tar} ]] && {
            printf "lrztar: ${tname%.tar} already present, aborting\n"
            return 1
        }
        [[ ${s%/*} != $s ]] && i="${s%/*}/" || i="./"
        tname="$i$tname"
        lrzip $p "$i$fname" && tar xf "$tname"
        x=$?
    } || {
        fname="$(basename "$s")"; tname="$fname.tar"
        [[ $fname == *.lrz ]] && {
            printf "lrztar: $fname is already a .lrz file, aborting\n"
            return 1
        }
        tar cf "$tname" "$s" && lrzip $p "$tname"
        x=$?
    }
    rm -rf "$tname" &> /dev/null
    ! ((x)) && ((v_D)) && rm -rf "$s" &> /dev/null
    return $x
}

lrztar_local "${@}"
